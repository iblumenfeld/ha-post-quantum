//import SHA256

//s: [256] -> [256]
//s x = sha256 x

// Lamport signatures

generate_public_key :{a} (fin a) => [a]([256],[256]) -> ([256] -> [256]) -> [a]([256],[256])
generate_public_key sks hash = [(hash xi, hash yi) | (xi, yi) <- sks]

sign_message : {a} (fin a) => [a] -> [a]([256],[256]) -> ([a],[a][256])
sign_message m sk = (m, signature) where
  signature =  [ if mi == True then xi else yi | mi <- m | (xi,yi) <- sk ]

verify_signature : {a} (fin a, a >= 1) => ([a],[a][256]) -> [a]([256],[256]) -> ([256]->[256]) -> Bit
verify_signature signed_m pk hash = verif where
  (m, sig) = signed_m
  checks = [ if mi == True then hash si == hxi else hash si == hyi | mi <- m | si <- sig | (hxi, hyi) <- pk]
  verif = -1 == checks

//verify_correct : [8] -> [8]([256],[256]) -> ([256] -> [256]) -> Bit
//verify_correct : [8] -> [8]([256],[256]) -> ([256] -> [256])->Bit
//property verify_correct m sks hash = verify_signature (sign_message m sks) (generate_public_key sks hash) hash 


//One bit signatures - Should be easier to use with SAW
generate_public_key_ob : [2][256] -> ([256] -> [256]) -> [2][256]
generate_public_key_ob sks hash = [hash sk | sk <- sks]

sign_message_ob : Bit -> [2][256] -> [256]
sign_message_ob m sks = if m then sks@0 else sks@1

verify_signature_ob : Bit -> [256] -> [2][256] -> ([256] -> [256]) -> Bit
verify_signature_ob m sig pks hash = (hash sig) == (if m then pks@0 else pks@1)

verify_correct_ob : Bit -> [2][256] -> ([256] -> [256]) -> Bit
verify_correct_ob m sks hash = verify_signature_ob m (sign_message_ob m sks) (generate_public_key_ob sks hash) hash

//Now we actually construct the Merkle Tree.  For ease we choose a case with 8 leaves.

evens : {a, b, c} (a == 2*c) => [a][b] -> [c][b]
evens xs = [ x@0 | x <- (groupBy `{2} xs) ]

odds : {a, b, c} (a == 2*c) => [a][b] -> [c][b]
odds xs = [ x@1 | x <- (groupBy `{2} xs) ]

merkle_gen_leaves : [8][2][256] -> ([512] -> [256]) -> [8][256]
merkle_gen_leaves pks hash = [hash (join pk) | pk <- pks]

//merkle_gen_next_level ais = [hash (ai # aii) | 
merkle_gen_level : {a} (fin a) => [2 * a][256] -> ([512] -> [256]) -> [a][256]
merkle_gen_level ais hash = [hash (ai # aii) | ai <- (evens ais) | aii <- (odds ais)] 

// Since current proof technology requires that we concretize the depth of the tree, we will create a helper function that creates a public key for a 4 level digital signature.

merkle_public_key : [8][2][256] -> ([512] -> [256]) -> [256]
merkle_public_key pks hash = a where
  leaves = merkle_gen_leaves pks hash
  a3 = leaves
  a2 = merkle_gen_level a3 hash
  a1 = merkle_gen_level a2 hash
  a0 = merkle_gen_level a1 hash
  a = a0@0

merkle_sign msg sks pks i hash = [msg] # [sk] # [auths] where
 sk = if msg then (sks@i)@0 else (sks@i)@1
 auths = zero //change this to the correct thing
 leaves = merkle_gen_leaves pks hash
 a3 = leaves
 a2 = merkle_gen_level a3 hash
 a1 = merkle_gen_level a2 hash
 a0 = merkle_gen_level a1 hash
//Could do this witha big case split, but that seems dumb.
 